// Input Section
input {
    keyboard {
        xkb {
		layout "us"
            	model ""
            	rules ""
            	variant ""
	    }
    	}

      	touchpad {
        	tap
        	// dwt
        	// dwtp
       		natural-scroll
        	accel-speed 0.000000
        	accel-profile "adaptive"
        	scroll-method "two-finger"
        	click-method "button-areas"
        	tap-button-map "left-right-middle"
    	}

    	mouse { accel-speed 0.000000; }
    	trackpoint { accel-speed 0.000000; }
    	trackball { accel-speed 0.000000; }
    	tablet
    	touch
    	warp-mouse-to-focus
    	focus-follows-mouse max-scroll-amount="0%"
    	workspace-auto-back-and-forth
}

// Output Monitors
output "eDP-1" {
	scale 1.25
    	transform "normal"
    	position x=0 y=0
    	mode "2560x1600@120.001"
}

// Screenshots
screenshot-path "~/Pictures/Screenshots/Screenshot-from-%Y-%m-%d-%H-%M-%S.png"
prefer-no-csd

// Layouts
layout {
   	gaps 5

 	struts {
        	left 0
        	right 0
        	top 0
        	bottom 0
    	}

    	focus-ring { off; }
    	border {
        	width 2
        	active-color "#d5c4a1"
        	inactive-color "#665c54"
    	}

    	insert-hint { color "rgb(127 200 255 / 50%)"; }
    	default-column-width { proportion 0.500000; }
    	preset-column-widths {
       	 	proportion 0.333333
        	proportion 0.500000
        	proportion 0.666667
        	proportion 1.000000
    	}
    	center-focused-column "never"
}
     
// Binds
binds {
    	Mod+Shift+Slash { show-hotkey-overlay; }
    	Mod+Return { spawn "alacritty"; }
    	Mod+Q { close-window; }
    	Mod+Space { spawn "wofi" "--show" "drun"; }

    	// Move focus to workspace
    	Mod+1 { focus-workspace 1; }
    	Mod+2 { focus-workspace 2; }
    	Mod+3 { focus-workspace 3; }
    	Mod+4 { focus-workspace 4; }
    	Mod+5 { focus-workspace 5; }
    	Mod+6 { focus-workspace 6; }
    	Mod+7 { focus-workspace 7; }
    	Mod+8 { focus-workspace 8; }
    	Mod+9 { focus-workspace 9; }
    	Mod+0 { focus-workspace 10; }

	// focus in a workspace
    	Mod+Left  { focus-column-left; }
    	Mod+Down  { focus-window-down; }
    	Mod+Up    { focus-window-up; }
    	Mod+Right { focus-column-right; }
    	Mod+H     { focus-column-left; }
    	Mod+J     { focus-window-down; }
    	Mod+K     { focus-window-up; }
    	Mod+L     { focus-column-right; }

	// Move Window to Workspace
    	Mod+Ctrl+1 { move-column-to-workspace 1; }
    	Mod+Ctrl+2 { move-column-to-workspace 2; }
    	Mod+Ctrl+3 { move-column-to-workspace 3; }
    	Mod+Ctrl+4 { move-column-to-workspace 4; }
    	Mod+Ctrl+5 { move-column-to-workspace 5; }
    	Mod+Ctrl+6 { move-column-to-workspace 6; }
    	Mod+Ctrl+7 { move-column-to-workspace 7; }
    	Mod+Ctrl+8 { move-column-to-workspace 8; }
    	Mod+Ctrl+9 { move-column-to-workspace 9; }
    	Mod+Ctrl+0 { move-column-to-workspace 10; }

	 // Move column in a workspace
    	Mod+Ctrl+Left  { move-column-left; }
    	Mod+Ctrl+Down  { move-window-down; }
    	Mod+Ctrl+Up    { move-window-up; }
    	Mod+Ctrl+Right { move-column-right; }
    	Mod+Ctrl+H     { move-column-left; }
    	Mod+Ctrl+J     { move-window-down; }
    	Mod+Ctrl+K     { move-window-up; }
    	Mod+Ctrl+L     { move-column-right; }

	// Move focus in a workspace
    	Mod+Home { focus-column-first; }
    	Mod+End  { focus-column-last; }
    	Mod+Ctrl+Home { move-column-to-first; }
    	Mod+Ctrl+End  { move-column-to-last; }

	// Move focus to monitor
    	// Mod+Shift+Left  { focus-monitor-left; }
    	// Mod+Shift+Down  { focus-monitor-down; }
    	// Mod+Shift+Up    { focus-monitor-up; }
    	// Mod+Shift+Right { focus-monitor-right; }
    	// Mod+Shift+H     { focus-monitor-left; }
    	// Mod+Shift+J     { focus-monitor-down; }
    	// Mod+Shift+K     { focus-monitor-up; }
    	// Mod+Shift+L     { focus-monitor-right; }

	// Move window to monitor
    	// Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    	// Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    	// Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    	// Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    	// Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    	// Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    	// Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    	// Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

	Mod+Page_Down      { focus-workspace-down; }
    	Mod+Page_Up        { focus-workspace-up; }
    	Mod+U              { focus-workspace-down; }
    	Mod+I              { focus-workspace-up; }
    	Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    	Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    	Mod+Ctrl+U         { move-column-to-workspace-down; }
    	Mod+Ctrl+I         { move-column-to-workspace-up; }

	Mod+Shift+Page_Down { move-workspace-down; }
    	Mod+Shift+Page_Up   { move-workspace-up; }
    	Mod+Shift+U         { move-workspace-down; }
    	Mod+Shift+I         { move-workspace-up; }

    	// Binding Mouse scroll
    	// Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    	// Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    	// Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    	// Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    	Mod+WheelScrollUp         cooldown-ms=150 { focus-column-right; }
    	Mod+WheelScrollDown       cooldown-ms=150 { focus-column-left; }
    	Mod+Ctrl+WheelScrollUp    cooldown-ms=150 { move-column-right; }
    	Mod+Ctrl+WheelScrollDown  cooldown-ms=150 { move-column-left; }

    	Mod+BracketLeft  { consume-or-expel-window-left; }
    	Mod+BracketRight { consume-or-expel-window-right; }
    	Mod+Comma  { consume-window-into-column; }
    	Mod+Period { expel-window-from-column; }

    	// Column width resize
    	Mod+R { switch-preset-column-width; }
    	Mod+Shift+R { switch-preset-window-height; }
    	Mod+Ctrl+R { reset-window-height; }
    	Mod+F { maximize-column; }
    	Mod+Shift+F { fullscreen-window; }
    	Mod+Ctrl+F { expand-column-to-available-width; }
    	Mod+C { center-column; }

    	// resize the column width
    	Mod+Minus { set-column-width "-10%"; }
    	Mod+Equal { set-column-width "+10%"; }

    	// resize the column height
    	Mod+Shift+Minus { set-window-height "-10%"; }
    	Mod+Shift+Equal { set-window-height "+10%"; }

    	// Move the focused window between the floating and the tiling layout.
    	Mod+V       { toggle-window-floating; }
    	Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    	// Mod+W { toggle-column-tabbed-display; }

    	Print { screenshot; }
    	Ctrl+Print { screenshot-screen; }
    	Alt+Print { screenshot-window; }

    	// Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    	Mod+Shift+E { quit; }
    	Ctrl+Alt+Delete { quit; }
    	Mod+Shift+P { power-off-monitors; }

    	// Volume
    	XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "-l" "1" "@DEFAULT_AUDIO_SINK@" "5%+"; }
    	XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%-"; }
    	XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    	XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    	// Brightness
    	XF86MonBrightnessUp  allow-when-locked=true { spawn "brightnessctl" "s" "10%+"; }
    	XF86MonBrightnessDown  allow-when-locked=true { spawn "brightnessctl" "s" "10%-"; }

    	// Player
    	XF86AudioNext allow-when-locked=true { spawn "playerctl" "next"; }
    	XF86AudioPause allow-when-locked=true { spawn "playerctl" "play-pause"; }
    	XF86AudioPlay allow-when-locked=true { spawn "playerctl" "play-pause"; }
    	XF86AudioPrev allow-when-locked=true { spawn "playerctl" "previous"; }
}

window-rule {
    	// match app-id="firefox$" title="^Picture-in-Picture$"
    	match title="^Picture-in-Picture$"
    	match title="^Discord Popout$"
    	open-floating true
    	default-floating-position relative-to="top-right" x=32 y=32
}

animations {
    	slowdown 1.000000
    	window-resize {
        	spring damping-ratio=1.000000 epsilon=0.000100 stiffness=800
        	custom-shader "vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {\n  vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;\n\n  vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;\n  vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;\n\n  // We can crop if the current window size is smaller than the next window\n  // size. One way to tell is by comparing to 1.0 the X and Y scaling\n  // coefficients in the current-to-next transformation matrix.\n  bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;\n  bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;\n\n  vec3 coords = coords_stretch;\n  if (can_crop_by_x)\n      coords.x = coords_crop.x;\n  if (can_crop_by_y)\n      coords.y = coords_crop.y;\n\n  vec4 color = texture2D(niri_tex_next, coords.st);\n\n  // However, when we crop, we also want to crop out anything outside the\n  // current geometry. This is because the area of the shader is unspecified\n  // and usually bigger than the current geometry, so if we don't fill pixels\n  // outside with transparency, the texture will leak out.\n  //\n  // When stretching, this is not an issue because the area outside will\n  // correspond to client-side decoration shadows, which are already supposed\n  // to be outside.\n  if (can_crop_by_x && (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x))\n      color = vec4(0.0);\n  if (can_crop_by_y && (coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y))\n      color = vec4(0.0);\n\n  return color;\n}\n"
    	}
}
